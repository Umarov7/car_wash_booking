// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: bookings.proto

package bookings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingsClient is the client API for Bookings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingsClient interface {
	CreateBooking(ctx context.Context, in *NewBooking, opts ...grpc.CallOption) (*CreateResp, error)
	GetBooking(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Booking, error)
	UpdateBooking(ctx context.Context, in *NewData, opts ...grpc.CallOption) (*UpdateResp, error)
	CancelBooking(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error)
	ListBookings(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*BookingsList, error)
}

type bookingsClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingsClient(cc grpc.ClientConnInterface) BookingsClient {
	return &bookingsClient{cc}
}

func (c *bookingsClient) CreateBooking(ctx context.Context, in *NewBooking, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, "/bookings.Bookings/CreateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) GetBooking(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/bookings.Bookings/GetBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) UpdateBooking(ctx context.Context, in *NewData, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/bookings.Bookings/UpdateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) CancelBooking(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/bookings.Bookings/CancelBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingsClient) ListBookings(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*BookingsList, error) {
	out := new(BookingsList)
	err := c.cc.Invoke(ctx, "/bookings.Bookings/ListBookings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingsServer is the server API for Bookings service.
// All implementations must embed UnimplementedBookingsServer
// for forward compatibility
type BookingsServer interface {
	CreateBooking(context.Context, *NewBooking) (*CreateResp, error)
	GetBooking(context.Context, *ID) (*Booking, error)
	UpdateBooking(context.Context, *NewData) (*UpdateResp, error)
	CancelBooking(context.Context, *ID) (*Void, error)
	ListBookings(context.Context, *Pagination) (*BookingsList, error)
	mustEmbedUnimplementedBookingsServer()
}

// UnimplementedBookingsServer must be embedded to have forward compatible implementations.
type UnimplementedBookingsServer struct {
}

func (UnimplementedBookingsServer) CreateBooking(context.Context, *NewBooking) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingsServer) GetBooking(context.Context, *ID) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedBookingsServer) UpdateBooking(context.Context, *NewData) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedBookingsServer) CancelBooking(context.Context, *ID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedBookingsServer) ListBookings(context.Context, *Pagination) (*BookingsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookings not implemented")
}
func (UnimplementedBookingsServer) mustEmbedUnimplementedBookingsServer() {}

// UnsafeBookingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingsServer will
// result in compilation errors.
type UnsafeBookingsServer interface {
	mustEmbedUnimplementedBookingsServer()
}

func RegisterBookingsServer(s grpc.ServiceRegistrar, srv BookingsServer) {
	s.RegisterService(&Bookings_ServiceDesc, srv)
}

func _Bookings_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBooking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.Bookings/CreateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).CreateBooking(ctx, req.(*NewBooking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.Bookings/GetBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).GetBooking(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.Bookings/UpdateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).UpdateBooking(ctx, req.(*NewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.Bookings/CancelBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).CancelBooking(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookings_ListBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingsServer).ListBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookings.Bookings/ListBookings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingsServer).ListBookings(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookings_ServiceDesc is the grpc.ServiceDesc for Bookings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookings.Bookings",
	HandlerType: (*BookingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBooking",
			Handler:    _Bookings_CreateBooking_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _Bookings_GetBooking_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _Bookings_UpdateBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _Bookings_CancelBooking_Handler,
		},
		{
			MethodName: "ListBookings",
			Handler:    _Bookings_ListBookings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bookings.proto",
}
