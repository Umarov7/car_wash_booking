// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: providers.proto

package providers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProvidersClient is the client API for Providers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvidersClient interface {
	CreateProvider(ctx context.Context, in *NewProvider, opts ...grpc.CallOption) (*CreateResp, error)
	SearchProviders(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SearchResp, error)
}

type providersClient struct {
	cc grpc.ClientConnInterface
}

func NewProvidersClient(cc grpc.ClientConnInterface) ProvidersClient {
	return &providersClient{cc}
}

func (c *providersClient) CreateProvider(ctx context.Context, in *NewProvider, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, "/providers.Providers/CreateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providersClient) SearchProviders(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SearchResp, error) {
	out := new(SearchResp)
	err := c.cc.Invoke(ctx, "/providers.Providers/SearchProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvidersServer is the server API for Providers service.
// All implementations must embed UnimplementedProvidersServer
// for forward compatibility
type ProvidersServer interface {
	CreateProvider(context.Context, *NewProvider) (*CreateResp, error)
	SearchProviders(context.Context, *Filter) (*SearchResp, error)
	mustEmbedUnimplementedProvidersServer()
}

// UnimplementedProvidersServer must be embedded to have forward compatible implementations.
type UnimplementedProvidersServer struct {
}

func (UnimplementedProvidersServer) CreateProvider(context.Context, *NewProvider) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedProvidersServer) SearchProviders(context.Context, *Filter) (*SearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProviders not implemented")
}
func (UnimplementedProvidersServer) mustEmbedUnimplementedProvidersServer() {}

// UnsafeProvidersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvidersServer will
// result in compilation errors.
type UnsafeProvidersServer interface {
	mustEmbedUnimplementedProvidersServer()
}

func RegisterProvidersServer(s grpc.ServiceRegistrar, srv ProvidersServer) {
	s.RegisterService(&Providers_ServiceDesc, srv)
}

func _Providers_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvidersServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.Providers/CreateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvidersServer).CreateProvider(ctx, req.(*NewProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Providers_SearchProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvidersServer).SearchProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/providers.Providers/SearchProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvidersServer).SearchProviders(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// Providers_ServiceDesc is the grpc.ServiceDesc for Providers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Providers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providers.Providers",
	HandlerType: (*ProvidersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProvider",
			Handler:    _Providers_CreateProvider_Handler,
		},
		{
			MethodName: "SearchProviders",
			Handler:    _Providers_SearchProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "providers.proto",
}
